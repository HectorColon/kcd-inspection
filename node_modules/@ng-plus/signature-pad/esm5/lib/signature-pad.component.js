/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from "@angular/core";
import * as SignaturePad from 'signature_pad/dist/signature_pad';
var SignaturePadComponent = /** @class */ (function () {
    function SignaturePadComponent() {
        this.points = [];
        this.pointsChange = new EventEmitter();
        this.editable = true;
        this.emitOnDragEnd = false;
        this.penColor = 'black';
        this.backgroundColor = 'transparent';
        this.showDoneButton = true;
        this.doneButtonText = 'Done';
        this.doneButtonClass = 'btn btn-primary';
        this.showClearButton = true;
        this.clearButtonText = 'Clear';
        this.clearButtonClass = 'btn btn-default';
        this.format = 'blob';
        this.height = 150;
        this.width = 600;
        this.done = new EventEmitter();
        this.cleared = new EventEmitter();
        this.responsive = true;
    }
    /**
     * @return {?}
     */
    SignaturePadComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    SignaturePadComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // Resize Canvas to full screen:
        if (this.responsive) {
            window.addEventListener('resize', function () {
                _this.resizeCanvas();
            });
            this.resizeCanvas();
        }
        this.initPad();
    };
    /**
     * @return {?}
     */
    SignaturePadComponent.prototype.initPad = function () {
        var _this = this;
        this.signaturePad = new SignaturePad(this.canvasRef.nativeElement, {
            penColor: this.penColor,
            backgroundColor: this.backgroundColor
        });
        this.signaturePad.penColor = this.penColor;
        if (this.editable) {
            this.signaturePad.on();
        }
        else {
            this.signaturePad.off();
        }
        this.signaturePad.onEnd = function () {
            _this.emitPoints();
            if (_this.emitOnDragEnd) {
                _this.emitBlob();
            }
        };
        this.applyPoints();
        if (this.emitOnDragEnd) {
            this.emitBlob();
        }
    };
    /**
     * @return {?}
     */
    SignaturePadComponent.prototype.clearPad = function () {
        this.signaturePad.clear();
        this.cleared.emit();
        this.emitPoints();
        if (this.emitOnDragEnd) {
            this.emitBlob();
        }
    };
    /**
     * @return {?}
     */
    SignaturePadComponent.prototype.applyPoints = function () {
        if (!this.points || !this.signaturePad) {
            return;
        }
        this.signaturePad.clear();
        var /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;
        var /** @type {?} */ points = JSON.parse(JSON.stringify(this.points));
        points.forEach(function (group) {
            group.points.forEach(function (pt) {
                pt.x = pt.x * multiplier;
                pt.y = pt.y * multiplier;
            });
        });
        this.signaturePad.fromData(points);
    };
    /**
     * @return {?}
     */
    SignaturePadComponent.prototype.emitPoints = function () {
        var /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;
        var /** @type {?} */ points = JSON.parse(JSON.stringify(this.signaturePad.toData()));
        points.forEach(function (group) {
            group.points.forEach(function (pt) {
                pt.x = pt.x / multiplier;
                pt.y = pt.y / multiplier;
            });
        });
        this.pointsChange.emit(points);
    };
    /**
     * @return {?}
     */
    SignaturePadComponent.prototype.emitPointsAndBlob = function () {
        this.emitPoints();
        this.emitBlob();
    };
    /**
     * @return {?}
     */
    SignaturePadComponent.prototype.emitBlob = function () {
        var _this = this;
        switch (this.format) {
            case 'base64':
                this.done.emit(this.signaturePad.toDataURL());
                break;
            case 'json':
                this.done.emit(this.signaturePad.toData());
                break;
            default:
                this.canvasRef.nativeElement.toBlob(function (blob) {
                    _this.done.emit(blob);
                });
                break;
        }
    };
    /**
     * @return {?}
     */
    SignaturePadComponent.prototype.resizeCanvas = function () {
        var /** @type {?} */ canvas = this.canvasRef.nativeElement;
        if (!canvas) {
            return;
        }
        var /** @type {?} */ pad = (canvas.closest('.signature-pad'));
        if (!pad) {
            return;
        }
        var /** @type {?} */ w = pad.offsetWidth;
        var /** @type {?} */ h = pad.offsetWidth / (this.width / this.height);
        canvas.setAttribute('width', "" + w);
        canvas.setAttribute('height', "" + h);
        this.applyPoints();
    };
    return SignaturePadComponent;
}());
export { SignaturePadComponent };
SignaturePadComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-signature-pad',
                template: "<div class=\"signature-pad\">\n    <canvas\n        [width]=\"width\"\n        [height]=\"height\"\n        #canvas></canvas>\n    <div class=\"buttons\">\n        <button [class]=\"doneButtonClass\" *ngIf=\"showDoneButton\" (click)=\"emitPointsAndBlob()\">{{ doneButtonText }}</button>\n        <button [class]=\"clearButtonClass\" *ngIf=\"showClearButton\" (click)=\"clearPad()\">{{ clearButtonText }}</button>\n    </div>\n</div>\n",
                styles: [".signature-pad canvas{background:#f2f2f2}.signature-pad .btn{margin-right:.25em}"]
            },] },
];
/** @nocollapse */
SignaturePadComponent.ctorParameters = function () { return []; };
SignaturePadComponent.propDecorators = {
    "canvasRef": [{ type: ViewChild, args: ['canvas', { read: ElementRef },] },],
    "points": [{ type: Input },],
    "pointsChange": [{ type: Output },],
    "editable": [{ type: Input },],
    "emitOnDragEnd": [{ type: Input },],
    "penColor": [{ type: Input },],
    "backgroundColor": [{ type: Input },],
    "showDoneButton": [{ type: Input },],
    "doneButtonText": [{ type: Input },],
    "doneButtonClass": [{ type: Input },],
    "showClearButton": [{ type: Input },],
    "clearButtonText": [{ type: Input },],
    "clearButtonClass": [{ type: Input },],
    "format": [{ type: Input },],
    "height": [{ type: Input },],
    "width": [{ type: Input },],
    "done": [{ type: Output },],
    "cleared": [{ type: Output },],
    "responsive": [{ type: Input },],
};
function SignaturePadComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    SignaturePadComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    SignaturePadComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    SignaturePadComponent.propDecorators;
    /** @type {?} */
    SignaturePadComponent.prototype.signaturePad;
    /** @type {?} */
    SignaturePadComponent.prototype.canvasRef;
    /** @type {?} */
    SignaturePadComponent.prototype.points;
    /** @type {?} */
    SignaturePadComponent.prototype.pointsChange;
    /** @type {?} */
    SignaturePadComponent.prototype.editable;
    /** @type {?} */
    SignaturePadComponent.prototype.emitOnDragEnd;
    /** @type {?} */
    SignaturePadComponent.prototype.penColor;
    /** @type {?} */
    SignaturePadComponent.prototype.backgroundColor;
    /** @type {?} */
    SignaturePadComponent.prototype.showDoneButton;
    /** @type {?} */
    SignaturePadComponent.prototype.doneButtonText;
    /** @type {?} */
    SignaturePadComponent.prototype.doneButtonClass;
    /** @type {?} */
    SignaturePadComponent.prototype.showClearButton;
    /** @type {?} */
    SignaturePadComponent.prototype.clearButtonText;
    /** @type {?} */
    SignaturePadComponent.prototype.clearButtonClass;
    /** @type {?} */
    SignaturePadComponent.prototype.format;
    /** @type {?} */
    SignaturePadComponent.prototype.height;
    /** @type {?} */
    SignaturePadComponent.prototype.width;
    /** @type {?} */
    SignaturePadComponent.prototype.done;
    /** @type {?} */
    SignaturePadComponent.prototype.cleared;
    /** @type {?} */
    SignaturePadComponent.prototype.responsive;
}
//# sourceMappingURL=signature-pad.component.js.map
