import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, NgModule } from '@angular/core';
import * as SignaturePad from 'signature_pad/dist/signature_pad';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SignaturePadComponent {
    constructor() {
        this.points = [];
        this.pointsChange = new EventEmitter();
        this.editable = true;
        this.emitOnDragEnd = false;
        this.penColor = 'black';
        this.backgroundColor = 'transparent';
        this.showDoneButton = true;
        this.doneButtonText = 'Done';
        this.doneButtonClass = 'btn btn-primary';
        this.showClearButton = true;
        this.clearButtonText = 'Clear';
        this.clearButtonClass = 'btn btn-default';
        this.format = 'blob';
        this.height = 150;
        this.width = 600;
        this.done = new EventEmitter();
        this.cleared = new EventEmitter();
        this.responsive = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Resize Canvas to full screen:
        if (this.responsive) {
            window.addEventListener('resize', () => {
                this.resizeCanvas();
            });
            this.resizeCanvas();
        }
        this.initPad();
    }
    /**
     * @return {?}
     */
    initPad() {
        this.signaturePad = new SignaturePad(this.canvasRef.nativeElement, {
            penColor: this.penColor,
            backgroundColor: this.backgroundColor
        });
        this.signaturePad.penColor = this.penColor;
        if (this.editable) {
            this.signaturePad.on();
        }
        else {
            this.signaturePad.off();
        }
        this.signaturePad.onEnd = () => {
            this.emitPoints();
            if (this.emitOnDragEnd) {
                this.emitBlob();
            }
        };
        this.applyPoints();
        if (this.emitOnDragEnd) {
            this.emitBlob();
        }
    }
    /**
     * @return {?}
     */
    clearPad() {
        this.signaturePad.clear();
        this.cleared.emit();
        this.emitPoints();
        if (this.emitOnDragEnd) {
            this.emitBlob();
        }
    }
    /**
     * @return {?}
     */
    applyPoints() {
        if (!this.points || !this.signaturePad) {
            return;
        }
        this.signaturePad.clear();
        const /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;
        const /** @type {?} */ points = JSON.parse(JSON.stringify(this.points));
        points.forEach(group => {
            group.points.forEach(pt => {
                pt.x = pt.x * multiplier;
                pt.y = pt.y * multiplier;
            });
        });
        this.signaturePad.fromData(points);
    }
    /**
     * @return {?}
     */
    emitPoints() {
        const /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;
        const /** @type {?} */ points = JSON.parse(JSON.stringify(this.signaturePad.toData()));
        points.forEach(group => {
            group.points.forEach(pt => {
                pt.x = pt.x / multiplier;
                pt.y = pt.y / multiplier;
            });
        });
        this.pointsChange.emit(points);
    }
    /**
     * @return {?}
     */
    emitPointsAndBlob() {
        this.emitPoints();
        this.emitBlob();
    }
    /**
     * @return {?}
     */
    emitBlob() {
        switch (this.format) {
            case 'base64':
                this.done.emit(this.signaturePad.toDataURL());
                break;
            case 'json':
                this.done.emit(this.signaturePad.toData());
                break;
            default:
                this.canvasRef.nativeElement.toBlob((blob) => {
                    this.done.emit(blob);
                });
                break;
        }
    }
    /**
     * @return {?}
     */
    resizeCanvas() {
        const /** @type {?} */ canvas = this.canvasRef.nativeElement;
        if (!canvas) {
            return;
        }
        const /** @type {?} */ pad = /** @type {?} */ (canvas.closest('.signature-pad'));
        if (!pad) {
            return;
        }
        const /** @type {?} */ w = pad.offsetWidth;
        const /** @type {?} */ h = pad.offsetWidth / (this.width / this.height);
        canvas.setAttribute('width', `${w}`);
        canvas.setAttribute('height', `${h}`);
        this.applyPoints();
    }
}
SignaturePadComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-signature-pad',
                template: `<div class="signature-pad">
    <canvas
        [width]="width"
        [height]="height"
        #canvas></canvas>
    <div class="buttons">
        <button [class]="doneButtonClass" *ngIf="showDoneButton" (click)="emitPointsAndBlob()">{{ doneButtonText }}</button>
        <button [class]="clearButtonClass" *ngIf="showClearButton" (click)="clearPad()">{{ clearButtonText }}</button>
    </div>
</div>
`,
                styles: [`.signature-pad canvas{background:#f2f2f2}.signature-pad .btn{margin-right:.25em}`]
            },] },
];
/** @nocollapse */
SignaturePadComponent.ctorParameters = () => [];
SignaturePadComponent.propDecorators = {
    "canvasRef": [{ type: ViewChild, args: ['canvas', { read: ElementRef },] },],
    "points": [{ type: Input },],
    "pointsChange": [{ type: Output },],
    "editable": [{ type: Input },],
    "emitOnDragEnd": [{ type: Input },],
    "penColor": [{ type: Input },],
    "backgroundColor": [{ type: Input },],
    "showDoneButton": [{ type: Input },],
    "doneButtonText": [{ type: Input },],
    "doneButtonClass": [{ type: Input },],
    "showClearButton": [{ type: Input },],
    "clearButtonText": [{ type: Input },],
    "clearButtonClass": [{ type: Input },],
    "format": [{ type: Input },],
    "height": [{ type: Input },],
    "width": [{ type: Input },],
    "done": [{ type: Output },],
    "cleared": [{ type: Output },],
    "responsive": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SignaturePadModule {
}
SignaturePadModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [SignaturePadComponent],
                exports: [SignaturePadComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { SignaturePadComponent, SignaturePadModule };
//# sourceMappingURL=ng-plus-signature-pad.js.map
