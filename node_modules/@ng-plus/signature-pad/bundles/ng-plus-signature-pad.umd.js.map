{
  "version": 3,
  "file": "ng-plus-signature-pad.umd.js",
  "sources": [
    "ng://@ng-plus/signature-pad/projects/signature-pad/src/lib/signature-pad.module.ts",
    "ng://@ng-plus/signature-pad/projects/signature-pad/src/lib/signature-pad.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { SignaturePadComponent } from './signature-pad.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SignaturePadComponent],\n  exports: [SignaturePadComponent]\n})\nexport class SignaturePadModule { }\n",
    "import {AfterViewInit, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from \"@angular/core\";\nimport * as SignaturePad from 'signature_pad/dist/signature_pad';\n\n@Component({\n    selector: 'ng-signature-pad',\n    template: `<div class=\"signature-pad\">\r\n    <canvas\r\n        [width]=\"width\"\r\n        [height]=\"height\"\r\n        #canvas></canvas>\r\n    <div class=\"buttons\">\r\n        <button [class]=\"doneButtonClass\" *ngIf=\"showDoneButton\" (click)=\"emitPointsAndBlob()\">{{ doneButtonText }}</button>\r\n        <button [class]=\"clearButtonClass\" *ngIf=\"showClearButton\" (click)=\"clearPad()\">{{ clearButtonText }}</button>\r\n    </div>\r\n</div>\r\n`,\n    styles: [`.signature-pad canvas{background:#f2f2f2}.signature-pad .btn{margin-right:.25em}`]\n})\nexport class SignaturePadComponent implements OnInit, AfterViewInit {\n\n    private signaturePad: SignaturePad;\n    @ViewChild('canvas', {read: ElementRef}) canvasRef: ElementRef;\n\n    @Input() points: any[] = [];\n    @Output() pointsChange = new EventEmitter<any>();\n\n    @Input() editable = true;\n    @Input() emitOnDragEnd = false;\n\n    @Input() penColor = 'black';\n    @Input() backgroundColor = 'transparent';\n\n    @Input() showDoneButton = true;\n    @Input() doneButtonText = 'Done';\n    @Input() doneButtonClass = 'btn btn-primary';\n    @Input() showClearButton = true;\n    @Input() clearButtonText = 'Clear';\n    @Input() clearButtonClass = 'btn btn-default';\n\n    @Input() format: 'blob' | 'base64' | 'json' = 'blob';\n\n    @Input() height = 150;\n    @Input() width = 600;\n\n    @Output() done = new EventEmitter();\n    @Output() cleared = new EventEmitter();\n\n    @Input() responsive = true;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    ngAfterViewInit() {\n        // Resize Canvas to full screen:\n        if (this.responsive) {\n            window.addEventListener('resize', () => {\n                this.resizeCanvas();\n            });\n            this.resizeCanvas();\n        }\n        this.initPad();\n    }\n\n    initPad() {\n        this.signaturePad = new SignaturePad(this.canvasRef.nativeElement, {\n            penColor: this.penColor,\n            backgroundColor: this.backgroundColor\n        });\n        this.signaturePad.penColor = this.penColor;\n\n        if (this.editable) {\n            this.signaturePad.on();\n        } else {\n            this.signaturePad.off();\n        }\n\n        this.signaturePad.onEnd = () => {\n            this.emitPoints();\n            if (this.emitOnDragEnd) {\n                this.emitBlob();\n            }\n        };\n\n        this.applyPoints();\n        if (this.emitOnDragEnd) {\n            this.emitBlob();\n        }\n    }\n\n    clearPad() {\n        this.signaturePad.clear();\n        this.cleared.emit();\n        this.emitPoints();\n        if (this.emitOnDragEnd) {\n            this.emitBlob();\n        }\n    }\n\n    applyPoints() {\n\n        if (!this.points || !this.signaturePad) { return; }\n\n        this.signaturePad.clear();\n\n        const multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;\n\n        const points = JSON.parse(JSON.stringify(this.points));\n        points.forEach(group => {\n            group.points.forEach(pt => {\n                pt.x = pt.x * multiplier;\n                pt.y = pt.y * multiplier;\n            });\n        });\n        this.signaturePad.fromData(points);\n    }\n\n    emitPoints() {\n        const multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;\n        const points = JSON.parse(JSON.stringify(this.signaturePad.toData()));\n        points.forEach(group => {\n            group.points.forEach(pt => {\n                pt.x = pt.x / multiplier;\n                pt.y = pt.y / multiplier;\n            });\n        });\n        this.pointsChange.emit(points);\n    }\n\n    emitPointsAndBlob() {\n        this.emitPoints();\n        this.emitBlob();\n    }\n\n    emitBlob() {\n\n        switch (this.format) {\n\n            case 'base64':\n                this.done.emit(this.signaturePad.toDataURL());\n                break;\n\n            case 'json':\n                this.done.emit(this.signaturePad.toData());\n                break;\n\n            default:\n                this.canvasRef.nativeElement.toBlob((blob) => {\n                    this.done.emit(blob);\n                });\n                break;\n        }\n\n    }\n\n\n    resizeCanvas() {\n\n        const canvas = this.canvasRef.nativeElement;\n        if (!canvas) { return; }\n\n        const pad = canvas.closest('.signature-pad') as HTMLElement;\n        if (!pad) { return; }\n\n        const w = pad.offsetWidth;\n        const h = pad.offsetWidth / (this.width / this.height);\n\n        canvas.setAttribute('width', `${w}`);\n        canvas.setAttribute('height', `${h}`);\n\n        this.applyPoints();\n\n    }\n\n}\n"
  ],
  "names": [
    "NgModule",
    "Input",
    "Output",
    "ViewChild",
    "ElementRef",
    "EventEmitter"
  ],
  "mappings": "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"
}
