{
  "version": 3,
  "file": "ng-plus-signature-pad.umd.min.js",
  "sources": [
    "ng://@ng-plus/signature-pad/projects/signature-pad/src/lib/signature-pad.component.ts",
    "ng://@ng-plus/signature-pad/projects/signature-pad/src/lib/signature-pad.module.ts"
  ],
  "sourcesContent": [
    "import {AfterViewInit, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from \"@angular/core\";\nimport * as SignaturePad from 'signature_pad/dist/signature_pad';\n\n@Component({\n    selector: 'ng-signature-pad',\n    template: `<div class=\"signature-pad\">\r\n    <canvas\r\n        [width]=\"width\"\r\n        [height]=\"height\"\r\n        #canvas></canvas>\r\n    <div class=\"buttons\">\r\n        <button [class]=\"doneButtonClass\" *ngIf=\"showDoneButton\" (click)=\"emitPointsAndBlob()\">{{ doneButtonText }}</button>\r\n        <button [class]=\"clearButtonClass\" *ngIf=\"showClearButton\" (click)=\"clearPad()\">{{ clearButtonText }}</button>\r\n    </div>\r\n</div>\r\n`,\n    styles: [`.signature-pad canvas{background:#f2f2f2}.signature-pad .btn{margin-right:.25em}`]\n})\nexport class SignaturePadComponent implements OnInit, AfterViewInit {\n\n    private signaturePad: SignaturePad;\n    @ViewChild('canvas', {read: ElementRef}) canvasRef: ElementRef;\n\n    @Input() points: any[] = [];\n    @Output() pointsChange = new EventEmitter<any>();\n\n    @Input() editable = true;\n    @Input() emitOnDragEnd = false;\n\n    @Input() penColor = 'black';\n    @Input() backgroundColor = 'transparent';\n\n    @Input() showDoneButton = true;\n    @Input() doneButtonText = 'Done';\n    @Input() doneButtonClass = 'btn btn-primary';\n    @Input() showClearButton = true;\n    @Input() clearButtonText = 'Clear';\n    @Input() clearButtonClass = 'btn btn-default';\n\n    @Input() format: 'blob' | 'base64' | 'json' = 'blob';\n\n    @Input() height = 150;\n    @Input() width = 600;\n\n    @Output() done = new EventEmitter();\n    @Output() cleared = new EventEmitter();\n\n    @Input() responsive = true;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    ngAfterViewInit() {\n        // Resize Canvas to full screen:\n        if (this.responsive) {\n            window.addEventListener('resize', () => {\n                this.resizeCanvas();\n            });\n            this.resizeCanvas();\n        }\n        this.initPad();\n    }\n\n    initPad() {\n        this.signaturePad = new SignaturePad(this.canvasRef.nativeElement, {\n            penColor: this.penColor,\n            backgroundColor: this.backgroundColor\n        });\n        this.signaturePad.penColor = this.penColor;\n\n        if (this.editable) {\n            this.signaturePad.on();\n        } else {\n            this.signaturePad.off();\n        }\n\n        this.signaturePad.onEnd = () => {\n            this.emitPoints();\n            if (this.emitOnDragEnd) {\n                this.emitBlob();\n            }\n        };\n\n        this.applyPoints();\n        if (this.emitOnDragEnd) {\n            this.emitBlob();\n        }\n    }\n\n    clearPad() {\n        this.signaturePad.clear();\n        this.cleared.emit();\n        this.emitPoints();\n        if (this.emitOnDragEnd) {\n            this.emitBlob();\n        }\n    }\n\n    applyPoints() {\n\n        if (!this.points || !this.signaturePad) { return; }\n\n        this.signaturePad.clear();\n\n        const multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;\n\n        const points = JSON.parse(JSON.stringify(this.points));\n        points.forEach(group => {\n            group.points.forEach(pt => {\n                pt.x = pt.x * multiplier;\n                pt.y = pt.y * multiplier;\n            });\n        });\n        this.signaturePad.fromData(points);\n    }\n\n    emitPoints() {\n        const multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;\n        const points = JSON.parse(JSON.stringify(this.signaturePad.toData()));\n        points.forEach(group => {\n            group.points.forEach(pt => {\n                pt.x = pt.x / multiplier;\n                pt.y = pt.y / multiplier;\n            });\n        });\n        this.pointsChange.emit(points);\n    }\n\n    emitPointsAndBlob() {\n        this.emitPoints();\n        this.emitBlob();\n    }\n\n    emitBlob() {\n\n        switch (this.format) {\n\n            case 'base64':\n                this.done.emit(this.signaturePad.toDataURL());\n                break;\n\n            case 'json':\n                this.done.emit(this.signaturePad.toData());\n                break;\n\n            default:\n                this.canvasRef.nativeElement.toBlob((blob) => {\n                    this.done.emit(blob);\n                });\n                break;\n        }\n\n    }\n\n\n    resizeCanvas() {\n\n        const canvas = this.canvasRef.nativeElement;\n        if (!canvas) { return; }\n\n        const pad = canvas.closest('.signature-pad') as HTMLElement;\n        if (!pad) { return; }\n\n        const w = pad.offsetWidth;\n        const h = pad.offsetWidth / (this.width / this.height);\n\n        canvas.setAttribute('width', `${w}`);\n        canvas.setAttribute('height', `${h}`);\n\n        this.applyPoints();\n\n    }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { SignaturePadComponent } from './signature-pad.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SignaturePadComponent],\n  exports: [SignaturePadComponent]\n})\nexport class SignaturePadModule { }\n"
  ],
  "names": [
    "SignaturePadComponent",
    "this",
    "points",
    "pointsChange",
    "EventEmitter",
    "editable",
    "emitOnDragEnd",
    "penColor",
    "backgroundColor",
    "showDoneButton",
    "doneButtonText",
    "doneButtonClass",
    "showClearButton",
    "clearButtonText",
    "clearButtonClass",
    "format",
    "height",
    "width",
    "done",
    "cleared",
    "responsive",
    "prototype",
    "ngOnInit",
    "ngAfterViewInit",
    "window",
    "addEventListener",
    "_this",
    "resizeCanvas",
    "initPad",
    "signaturePad",
    "SignaturePad",
    "canvasRef",
    "nativeElement",
    "on",
    "off",
    "onEnd",
    "emitPoints",
    "emitBlob",
    "applyPoints",
    "clearPad",
    "clear",
    "emit",
    "multiplier",
    "offsetWidth",
    "JSON",
    "parse",
    "stringify",
    "forEach",
    "group",
    "pt",
    "x",
    "y",
    "toData",
    "emitPointsAndBlob",
    "toDataURL",
    "toBlob",
    "blob",
    "canvas",
    "pad",
    "closest",
    "w",
    "h",
    "setAttribute",
    "ctorParameters",
    "propDecorators",
    "type",
    "ViewChild",
    "args",
    "read",
    "ElementRef",
    "Input",
    "Output",
    "SignaturePadModule",
    "decorators",
    "NgModule"
  ],
  "mappings": "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"
}
