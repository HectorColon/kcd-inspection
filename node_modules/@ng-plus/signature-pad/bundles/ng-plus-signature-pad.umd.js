(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('signature_pad/dist/signature_pad'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ng-plus/signature-pad', ['exports', '@angular/core', 'signature_pad/dist/signature_pad', '@angular/common'], factory) :
    (factory((global['ng-plus'] = global['ng-plus'] || {}, global['ng-plus']['signature-pad'] = {}),global.ng.core,null,global.ng.common));
}(this, (function (exports,core,SignaturePad,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SignaturePadComponent = (function () {
        function SignaturePadComponent() {
            this.points = [];
            this.pointsChange = new core.EventEmitter();
            this.editable = true;
            this.emitOnDragEnd = false;
            this.penColor = 'black';
            this.backgroundColor = 'transparent';
            this.showDoneButton = true;
            this.doneButtonText = 'Done';
            this.doneButtonClass = 'btn btn-primary';
            this.showClearButton = true;
            this.clearButtonText = 'Clear';
            this.clearButtonClass = 'btn btn-default';
            this.format = 'blob';
            this.height = 150;
            this.width = 600;
            this.done = new core.EventEmitter();
            this.cleared = new core.EventEmitter();
            this.responsive = true;
        }
        /**
         * @return {?}
         */
        SignaturePadComponent.prototype.ngOnInit = function () {
        };
        /**
         * @return {?}
         */
        SignaturePadComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Resize Canvas to full screen:
            if (this.responsive) {
                window.addEventListener('resize', function () {
                    _this.resizeCanvas();
                });
                this.resizeCanvas();
            }
            this.initPad();
        };
        /**
         * @return {?}
         */
        SignaturePadComponent.prototype.initPad = function () {
            var _this = this;
            this.signaturePad = new SignaturePad(this.canvasRef.nativeElement, {
                penColor: this.penColor,
                backgroundColor: this.backgroundColor
            });
            this.signaturePad.penColor = this.penColor;
            if (this.editable) {
                this.signaturePad.on();
            }
            else {
                this.signaturePad.off();
            }
            this.signaturePad.onEnd = function () {
                _this.emitPoints();
                if (_this.emitOnDragEnd) {
                    _this.emitBlob();
                }
            };
            this.applyPoints();
            if (this.emitOnDragEnd) {
                this.emitBlob();
            }
        };
        /**
         * @return {?}
         */
        SignaturePadComponent.prototype.clearPad = function () {
            this.signaturePad.clear();
            this.cleared.emit();
            this.emitPoints();
            if (this.emitOnDragEnd) {
                this.emitBlob();
            }
        };
        /**
         * @return {?}
         */
        SignaturePadComponent.prototype.applyPoints = function () {
            if (!this.points || !this.signaturePad) {
                return;
            }
            this.signaturePad.clear();
            var /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;
            var /** @type {?} */ points = JSON.parse(JSON.stringify(this.points));
            points.forEach(function (group) {
                group.points.forEach(function (pt) {
                    pt.x = pt.x * multiplier;
                    pt.y = pt.y * multiplier;
                });
            });
            this.signaturePad.fromData(points);
        };
        /**
         * @return {?}
         */
        SignaturePadComponent.prototype.emitPoints = function () {
            var /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;
            var /** @type {?} */ points = JSON.parse(JSON.stringify(this.signaturePad.toData()));
            points.forEach(function (group) {
                group.points.forEach(function (pt) {
                    pt.x = pt.x / multiplier;
                    pt.y = pt.y / multiplier;
                });
            });
            this.pointsChange.emit(points);
        };
        /**
         * @return {?}
         */
        SignaturePadComponent.prototype.emitPointsAndBlob = function () {
            this.emitPoints();
            this.emitBlob();
        };
        /**
         * @return {?}
         */
        SignaturePadComponent.prototype.emitBlob = function () {
            var _this = this;
            switch (this.format) {
                case 'base64':
                    this.done.emit(this.signaturePad.toDataURL());
                    break;
                case 'json':
                    this.done.emit(this.signaturePad.toData());
                    break;
                default:
                    this.canvasRef.nativeElement.toBlob(function (blob) {
                        _this.done.emit(blob);
                    });
                    break;
            }
        };
        /**
         * @return {?}
         */
        SignaturePadComponent.prototype.resizeCanvas = function () {
            var /** @type {?} */ canvas = this.canvasRef.nativeElement;
            if (!canvas) {
                return;
            }
            var /** @type {?} */ pad = (canvas.closest('.signature-pad'));
            if (!pad) {
                return;
            }
            var /** @type {?} */ w = pad.offsetWidth;
            var /** @type {?} */ h = pad.offsetWidth / (this.width / this.height);
            canvas.setAttribute('width', "" + w);
            canvas.setAttribute('height', "" + h);
            this.applyPoints();
        };
        return SignaturePadComponent;
    }());
    SignaturePadComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ng-signature-pad',
                    template: "<div class=\"signature-pad\">\n    <canvas\n        [width]=\"width\"\n        [height]=\"height\"\n        #canvas></canvas>\n    <div class=\"buttons\">\n        <button [class]=\"doneButtonClass\" *ngIf=\"showDoneButton\" (click)=\"emitPointsAndBlob()\">{{ doneButtonText }}</button>\n        <button [class]=\"clearButtonClass\" *ngIf=\"showClearButton\" (click)=\"clearPad()\">{{ clearButtonText }}</button>\n    </div>\n</div>\n",
                    styles: [".signature-pad canvas{background:#f2f2f2}.signature-pad .btn{margin-right:.25em}"]
                },] },
    ];
    /** @nocollapse */
    SignaturePadComponent.ctorParameters = function () { return []; };
    SignaturePadComponent.propDecorators = {
        "canvasRef": [{ type: core.ViewChild, args: ['canvas', { read: core.ElementRef },] },],
        "points": [{ type: core.Input },],
        "pointsChange": [{ type: core.Output },],
        "editable": [{ type: core.Input },],
        "emitOnDragEnd": [{ type: core.Input },],
        "penColor": [{ type: core.Input },],
        "backgroundColor": [{ type: core.Input },],
        "showDoneButton": [{ type: core.Input },],
        "doneButtonText": [{ type: core.Input },],
        "doneButtonClass": [{ type: core.Input },],
        "showClearButton": [{ type: core.Input },],
        "clearButtonText": [{ type: core.Input },],
        "clearButtonClass": [{ type: core.Input },],
        "format": [{ type: core.Input },],
        "height": [{ type: core.Input },],
        "width": [{ type: core.Input },],
        "done": [{ type: core.Output },],
        "cleared": [{ type: core.Output },],
        "responsive": [{ type: core.Input },],
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SignaturePadModule = (function () {
        function SignaturePadModule() {
        }
        return SignaturePadModule;
    }());
    SignaturePadModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [SignaturePadComponent],
                    exports: [SignaturePadComponent]
                },] },
    ];

    exports.SignaturePadComponent = SignaturePadComponent;
    exports.SignaturePadModule = SignaturePadModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-plus-signature-pad.umd.js.map
