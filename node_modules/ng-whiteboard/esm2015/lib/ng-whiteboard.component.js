/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-whiteboard.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, ElementRef, Output, EventEmitter } from '@angular/core';
import { NgWhiteboardService } from './ng-whiteboard.service';
import { WhiteboardOptions, ActionType, FormatType } from './ng-whiteboard.types';
import { curveBasis, select, drag, line, event, mouse } from 'd3';
export class NgWhiteboardComponent {
    /**
     * @param {?} whiteboardService
     */
    constructor(whiteboardService) {
        this.whiteboardService = whiteboardService;
        this.whiteboardOptions = new WhiteboardOptions();
        this.init = new EventEmitter();
        this.clear = new EventEmitter();
        this.undo = new EventEmitter();
        this.redo = new EventEmitter();
        this.save = new EventEmitter();
        this.imageAdded = new EventEmitter();
        this.selection = undefined;
        this.subscriptionList = [];
        this.undoStack = [];
        this.redoStack = [];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.subscriptionList.push(this.whiteboardService.eraseSvgMethodCalled$.subscribe((/**
         * @return {?}
         */
        () => this.eraseSvg(this.selection))));
        this.subscriptionList.push(this.whiteboardService.saveSvgMethodCalled$.subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ({ name, format }) => this.saveSvg(name, format))));
        this.subscriptionList.push(this.whiteboardService.undoSvgMethodCalled$.subscribe((/**
         * @return {?}
         */
        () => this.undoDraw())));
        this.subscriptionList.push(this.whiteboardService.redoSvgMethodCalled$.subscribe((/**
         * @return {?}
         */
        () => this.redoDraw())));
        this.subscriptionList.push(this.whiteboardService.addImageMethodCalled$.subscribe((/**
         * @param {?} image
         * @return {?}
         */
        (image) => this.addImage(image))));
        this.selection = this.initSvg(this.svgContainer.nativeElement);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptionList.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => this._unsubscribe(subscription)));
    }
    /**
     * @private
     * @param {?} selector
     * @return {?}
     */
    initSvg(selector) {
        /** @type {?} */
        const d3Line = line().curve(curveBasis);
        /** @type {?} */
        const svg = select(selector).call(drag()
            .container(selector)
            .subject((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const p = [event.x, event.y];
            return [p, p];
        }))
            .on('start', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const d = event.subject;
            /** @type {?} */
            const active = svg
                .append('path')
                .datum(d)
                .attr('class', 'line')
                .attr('style', `
           fill: none;
           stroke: ${this.color || this.whiteboardOptions.color};
           stroke-width: ${this.size || this.whiteboardOptions.size};
           stroke-linejoin: ${this.linejoin || this.whiteboardOptions.linejoin};
           stroke-linecap: ${this.linecap || this.whiteboardOptions.linecap};
           `);
            active.attr('d', d3Line);
            event.on('drag', (/**
             * @return {?}
             */
            function () {
                active.datum().push(mouse(this));
                active.attr('d', d3Line);
            }));
            event.on('end', (/**
             * @return {?}
             */
            () => {
                active.attr('d', d3Line);
                if (this.undoStack.length < 1) {
                    this.redoStack = [];
                }
                this.undoStack.push({ type: ActionType.Line, line: active.node() });
            }));
        })));
        this.init.emit();
        return svg;
    }
    /**
     * @private
     * @param {?} image
     * @return {?}
     */
    addImage(image) {
        this.drawImage(image);
    }
    /**
     * @private
     * @param {?} svg
     * @return {?}
     */
    eraseSvg(svg) {
        svg.selectAll('*').remove();
        this.undoStack = [];
        this.redoStack = [];
        this.clear.emit();
    }
    /**
     * @private
     * @param {?} name
     * @param {?} format
     * @return {?}
     */
    saveSvg(name, format) {
        /** @type {?} */
        const svgString = this.saveAsSvg(this.selection.clone(true).node());
        switch (format) {
            case FormatType.Base64:
                this.svgString2Image(svgString, Number(this.selection.style('width').replace('px', '')), Number(this.selection.style('height').replace('px', '')), format, (/**
                 * @param {?} img
                 * @return {?}
                 */
                (img) => {
                    this.save.emit(img);
                }));
                break;
            case FormatType.Svg:
                /** @type {?} */
                const imgSrc = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
                this.download(imgSrc, name);
                this.save.emit(imgSrc);
                break;
            default:
                this.svgString2Image(svgString, Number(this.selection.style('width').replace('px', '')), Number(this.selection.style('height').replace('px', '')), format, (/**
                 * @param {?} img
                 * @return {?}
                 */
                (img) => {
                    this.download(img, name);
                    this.save.emit(img);
                }));
                break;
        }
    }
    /**
     * @private
     * @return {?}
     */
    undoDraw() {
        if (!this.undoStack.length) {
            return;
        }
        this.redoStack.push(this.undoStack.pop());
        this.selection.selectAll('.line').remove();
        this.undoStack.forEach((/**
         * @param {?} action
         * @return {?}
         */
        (action) => {
            if (action.type === ActionType.Line) {
                this.drawLine(action.line);
            }
            else if (action.type === ActionType.Image) {
                this.drawLine(action.image);
            }
        }));
        this.undo.emit();
    }
    /**
     * @private
     * @return {?}
     */
    redoDraw() {
        if (!this.redoStack.length) {
            return;
        }
        this.undoStack.push(this.redoStack.pop());
        this.selection.selectAll('.line').remove();
        this.undoStack.forEach((/**
         * @param {?} action
         * @return {?}
         */
        (action) => {
            if (action.type === ActionType.Line) {
                this.drawLine(action.line);
            }
            else if (action.type === ActionType.Image) {
                this.drawLine(action.image);
            }
        }));
        this.redo.emit();
    }
    /**
     * @private
     * @param {?} pathNode
     * @return {?}
     */
    drawLine(pathNode) {
        this.selection.node().appendChild(pathNode);
    }
    /**
     * @private
     * @param {?} image
     * @return {?}
     */
    drawImage(image) {
        /** @type {?} */
        const group = this.selection
            .append('g')
            .data([{ x: 20, y: 20, r: 1, scale: 1 }])
            .attr('x', 0)
            .attr('y', 0)
            .attr('transform', 'translate(0,0)');
        /** @type {?} */
        const tempImg = new Image();
        tempImg.onload = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const aspectRatio = tempImg.width / tempImg.height;
            /** @type {?} */
            const height = tempImg.height > Number(this.selection.style('height').replace('px', ''))
                ? Number(this.selection.style('height').replace('px', '')) - 40
                : tempImg.height;
            /** @type {?} */
            const width = height === Number(this.selection.style('height').replace('px', '')) - 40
                ? (Number(this.selection.style('height').replace('px', '')) - 40) * aspectRatio
                : tempImg.width;
            group
                .append('image')
                .attr('x', 0)
                .attr('y', 0)
                .attr('height', height)
                .attr('width', width)
                .attr('preserveAspectRatio', 'none')
                .attr('xlink:href', image.toString());
            group
                .append('rect')
                .attr('x', 0)
                .attr('y', 0)
                .attr('width', 20)
                .attr('height', 20)
                .style('opacity', 0)
                .attr('fill', (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return '#cccccc';
            }))
                .call(drag()
                .subject((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const p = [event.x, event.y];
                return [p, p];
            }))
                .on('start', (/**
             * @return {?}
             */
            () => {
                event.on('drag', (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    /** @type {?} */
                    const cursor = select(this);
                    /** @type {?} */
                    const cord = mouse(this);
                    d.x += cord[0] - Number(cursor.attr('width')) / 2;
                    d.y += cord[1] - Number(cursor.attr('height')) / 2;
                    select(this.parentNode).attr('transform', (/**
                     * @return {?}
                     */
                    () => {
                        return ('translate(' + [d.x, d.y] + '),rotate(' + 0 + ',160, 160),scale(' + d.scale + ',' + d.scale + ')');
                    }));
                }));
            })));
            group
                .on('mouseover', (/**
             * @return {?}
             */
            function () {
                select(this).select('rect').style('opacity', 1.0);
            }))
                .on('mouseout', (/**
             * @return {?}
             */
            function () {
                select(this).select('rect').style('opacity', 0);
            }));
            // this.undoStack.push({ type: ActionType.Image, image: group.node() });
        });
        tempImg.src = image.toString();
    }
    /**
     * @private
     * @param {?} subscription
     * @return {?}
     */
    _unsubscribe(subscription) {
        if (subscription) {
            subscription.unsubscribe();
        }
    }
    /**
     * @private
     * @param {?} svgString
     * @param {?} width
     * @param {?} height
     * @param {?} format
     * @param {?} callback
     * @return {?}
     */
    svgString2Image(svgString, width, height, format, callback) {
        // set default for format parameter
        format = format || 'png';
        // SVG data URL from SVG string
        /** @type {?} */
        const svgData = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
        // create canvas in memory(not in DOM)
        /** @type {?} */
        const canvas = document.createElement('canvas');
        // get canvas context for drawing on canvas
        /** @type {?} */
        const context = canvas.getContext('2d');
        // set canvas size
        canvas.width = width;
        canvas.height = height;
        // create image in memory(not in DOM)
        /** @type {?} */
        const image = new Image();
        // later when image loads run this
        image.onload = (/**
         * @return {?}
         */
        () => {
            // async (happens later)
            // clear canvas
            context.clearRect(0, 0, width, height);
            // draw image with SVG data to canvas
            context.drawImage(image, 0, 0, width, height);
            // snapshot canvas as png
            /** @type {?} */
            const pngData = canvas.toDataURL('image/' + format);
            // pass png data URL to callback
            callback(pngData);
        }); // end async
        // start loading SVG data into in memory image
        image.src = svgData;
    }
    /**
     * @private
     * @param {?} svgNode
     * @return {?}
     */
    saveAsSvg(svgNode) {
        svgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');
        // Set width and height for svg element
        svgNode.setAttribute('width', Number(this.selection.style('width').replace('px', '')));
        svgNode.setAttribute('height', Number(this.selection.style('height').replace('px', '')));
        /** @type {?} */
        const serializer = new XMLSerializer();
        /** @type {?} */
        let svgString = serializer.serializeToString(svgNode);
        svgString = svgString.replace(/(\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace
        svgString = svgString.replace(/NS\d+:href/g, 'xlink:href');
        return svgString;
    }
    /**
     * @private
     * @param {?} url
     * @param {?} name
     * @return {?}
     */
    download(url, name) {
        /** @type {?} */
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('visibility', 'hidden');
        link.download = name || 'new white-board';
        document.body.appendChild(link);
        link.click();
    }
}
NgWhiteboardComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'ng-whiteboard',
                template: `
    <svg #svgContainer [style.background-color]="this.backgroundColor || this.whiteboardOptions.backgroundColor"></svg>
  `,
                styles: [":host,:host svg{height:inherit;max-height:inherit;max-width:inherit;min-height:inherit;min-width:inherit;width:inherit}:host svg{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;background-position:50%;background-repeat:no-repeat;background-size:cover;cursor:url(\"data:image/svg+xml,%3Csvg xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 height%3D%2220%22 width%3D%2220%22%3E  %3Ccircle cx%3D%225%22 cy%3D%225%22 r%3D%225%22 style%3D%22fill%3A none%3B stroke%3A %235a5a5a%3B stroke-width%3A .02em%3B%22 %2F%3E%3C%2Fsvg%3E\") 5 5,crosshair;user-select:none}:host svg .bg-image{position:relative}:host svg .bg-image .image-cursor{background-color:#080;height:10px;position:absolute;right:0;top:0;width:10px}"]
            }] }
];
/** @nocollapse */
NgWhiteboardComponent.ctorParameters = () => [
    { type: NgWhiteboardService }
];
NgWhiteboardComponent.propDecorators = {
    svgContainer: [{ type: ViewChild, args: ['svgContainer', { static: false },] }],
    whiteboardOptions: [{ type: Input }],
    color: [{ type: Input }],
    backgroundColor: [{ type: Input }],
    size: [{ type: Input }],
    linejoin: [{ type: Input }],
    linecap: [{ type: Input }],
    init: [{ type: Output }],
    clear: [{ type: Output }],
    undo: [{ type: Output }],
    redo: [{ type: Output }],
    save: [{ type: Output }],
    imageAdded: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardComponent.prototype.svgContainer;
    /** @type {?} */
    NgWhiteboardComponent.prototype.whiteboardOptions;
    /** @type {?} */
    NgWhiteboardComponent.prototype.color;
    /** @type {?} */
    NgWhiteboardComponent.prototype.backgroundColor;
    /** @type {?} */
    NgWhiteboardComponent.prototype.size;
    /** @type {?} */
    NgWhiteboardComponent.prototype.linejoin;
    /** @type {?} */
    NgWhiteboardComponent.prototype.linecap;
    /** @type {?} */
    NgWhiteboardComponent.prototype.init;
    /** @type {?} */
    NgWhiteboardComponent.prototype.clear;
    /** @type {?} */
    NgWhiteboardComponent.prototype.undo;
    /** @type {?} */
    NgWhiteboardComponent.prototype.redo;
    /** @type {?} */
    NgWhiteboardComponent.prototype.save;
    /** @type {?} */
    NgWhiteboardComponent.prototype.imageAdded;
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardComponent.prototype.selection;
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardComponent.prototype.subscriptionList;
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardComponent.prototype.undoStack;
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardComponent.prototype.redoStack;
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardComponent.prototype.whiteboardService;
}
//# sourceMappingURL=data:application/json;base64,