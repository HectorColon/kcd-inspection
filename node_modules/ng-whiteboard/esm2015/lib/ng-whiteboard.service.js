/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-whiteboard.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { FormatType } from './ng-whiteboard.types';
import * as i0 from "@angular/core";
export class NgWhiteboardService {
    constructor() {
        // Observable string sources
        this.eraseSvgMethodCallSource = new Subject();
        this.saveSvgMethodCallSource = new Subject();
        this.undoSvgMethodCallSource = new Subject();
        this.redoSvgMethodCallSource = new Subject();
        this.addImageMethodCallSource = new Subject();
        // Observable string streams
        this.eraseSvgMethodCalled$ = this.eraseSvgMethodCallSource.asObservable();
        this.saveSvgMethodCalled$ = this.saveSvgMethodCallSource.asObservable();
        this.undoSvgMethodCalled$ = this.undoSvgMethodCallSource.asObservable();
        this.redoSvgMethodCalled$ = this.redoSvgMethodCallSource.asObservable();
        this.addImageMethodCalled$ = this.addImageMethodCallSource.asObservable();
    }
    // Service message commands
    /**
     * @return {?}
     */
    erase() {
        this.eraseSvgMethodCallSource.next();
    }
    /**
     * @param {?=} format
     * @param {?=} name
     * @return {?}
     */
    save(format = FormatType.Png, name = 'New image') {
        this.saveSvgMethodCallSource.next({ name, format });
    }
    /**
     * @return {?}
     */
    undo() {
        this.undoSvgMethodCallSource.next();
    }
    /**
     * @return {?}
     */
    redo() {
        this.redoSvgMethodCallSource.next();
    }
    /**
     * @param {?} image
     * @return {?}
     */
    addImage(image) {
        this.addImageMethodCallSource.next(image);
    }
}
NgWhiteboardService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */ NgWhiteboardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgWhiteboardService_Factory() { return new NgWhiteboardService(); }, token: NgWhiteboardService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardService.prototype.eraseSvgMethodCallSource;
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardService.prototype.saveSvgMethodCallSource;
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardService.prototype.undoSvgMethodCallSource;
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardService.prototype.redoSvgMethodCallSource;
    /**
     * @type {?}
     * @private
     */
    NgWhiteboardService.prototype.addImageMethodCallSource;
    /** @type {?} */
    NgWhiteboardService.prototype.eraseSvgMethodCalled$;
    /** @type {?} */
    NgWhiteboardService.prototype.saveSvgMethodCalled$;
    /** @type {?} */
    NgWhiteboardService.prototype.undoSvgMethodCalled$;
    /** @type {?} */
    NgWhiteboardService.prototype.redoSvgMethodCalled$;
    /** @type {?} */
    NgWhiteboardService.prototype.addImageMethodCalled$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2hpdGVib2FyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9tb3N0YWZhemtlL25nLXdoaXRlYm9hcmQvcHJvamVjdHMvbmctd2hpdGVib2FyZC9zcmMvIiwic291cmNlcyI6WyJsaWIvbmctd2hpdGVib2FyZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSx1QkFBdUIsQ0FBQzs7QUFLaEUsTUFBTSxPQUFPLG1CQUFtQjtJQUhoQzs7UUFLVSw2QkFBd0IsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO1FBQzlDLDRCQUF1QixHQUFHLElBQUksT0FBTyxFQUF5QyxDQUFDO1FBQy9FLDRCQUF1QixHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDN0MsNEJBQXVCLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUM3Qyw2QkFBd0IsR0FBRyxJQUFJLE9BQU8sRUFBd0IsQ0FBQzs7UUFHdkUsMEJBQXFCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3JFLHlCQUFvQixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNuRSx5QkFBb0IsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbkUseUJBQW9CLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ25FLDBCQUFxQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQWtCdEU7Ozs7O0lBZlEsS0FBSztRQUNWLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QyxDQUFDOzs7Ozs7SUFDTSxJQUFJLENBQUMsU0FBc0IsVUFBVSxDQUFDLEdBQUcsRUFBRSxPQUFlLFdBQVc7UUFDMUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7SUFDTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFDTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RDLENBQUM7Ozs7O0lBQ00sUUFBUSxDQUFDLEtBQTJCO1FBQ3pDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7O1lBakNGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7SUFHQyx1REFBc0Q7Ozs7O0lBQ3RELHNEQUF1Rjs7Ozs7SUFDdkYsc0RBQXFEOzs7OztJQUNyRCxzREFBcUQ7Ozs7O0lBQ3JELHVEQUF1RTs7SUFHdkUsb0RBQXFFOztJQUNyRSxtREFBbUU7O0lBQ25FLG1EQUFtRTs7SUFDbkUsbURBQW1FOztJQUNuRSxvREFBcUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGb3JtYXRUeXBlLCBmb3JtYXRUeXBlcyB9IGZyb20gJy4vbmctd2hpdGVib2FyZC50eXBlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ1doaXRlYm9hcmRTZXJ2aWNlIHtcbiAgLy8gT2JzZXJ2YWJsZSBzdHJpbmcgc291cmNlc1xuICBwcml2YXRlIGVyYXNlU3ZnTWV0aG9kQ2FsbFNvdXJjZSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgcHJpdmF0ZSBzYXZlU3ZnTWV0aG9kQ2FsbFNvdXJjZSA9IG5ldyBTdWJqZWN0PHsgbmFtZTogc3RyaW5nOyBmb3JtYXQ6IGZvcm1hdFR5cGVzIH0+KCk7XG4gIHByaXZhdGUgdW5kb1N2Z01ldGhvZENhbGxTb3VyY2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIHByaXZhdGUgcmVkb1N2Z01ldGhvZENhbGxTb3VyY2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIHByaXZhdGUgYWRkSW1hZ2VNZXRob2RDYWxsU291cmNlID0gbmV3IFN1YmplY3Q8c3RyaW5nIHwgQXJyYXlCdWZmZXI+KCk7XG5cbiAgLy8gT2JzZXJ2YWJsZSBzdHJpbmcgc3RyZWFtc1xuICBlcmFzZVN2Z01ldGhvZENhbGxlZCQgPSB0aGlzLmVyYXNlU3ZnTWV0aG9kQ2FsbFNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgc2F2ZVN2Z01ldGhvZENhbGxlZCQgPSB0aGlzLnNhdmVTdmdNZXRob2RDYWxsU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuICB1bmRvU3ZnTWV0aG9kQ2FsbGVkJCA9IHRoaXMudW5kb1N2Z01ldGhvZENhbGxTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG4gIHJlZG9TdmdNZXRob2RDYWxsZWQkID0gdGhpcy5yZWRvU3ZnTWV0aG9kQ2FsbFNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgYWRkSW1hZ2VNZXRob2RDYWxsZWQkID0gdGhpcy5hZGRJbWFnZU1ldGhvZENhbGxTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG5cbiAgLy8gU2VydmljZSBtZXNzYWdlIGNvbW1hbmRzXG4gIHB1YmxpYyBlcmFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLmVyYXNlU3ZnTWV0aG9kQ2FsbFNvdXJjZS5uZXh0KCk7XG4gIH1cbiAgcHVibGljIHNhdmUoZm9ybWF0OiBmb3JtYXRUeXBlcyA9IEZvcm1hdFR5cGUuUG5nLCBuYW1lOiBzdHJpbmcgPSAnTmV3IGltYWdlJyk6IHZvaWQge1xuICAgIHRoaXMuc2F2ZVN2Z01ldGhvZENhbGxTb3VyY2UubmV4dCh7IG5hbWUsIGZvcm1hdCB9KTtcbiAgfVxuICBwdWJsaWMgdW5kbygpOiB2b2lkIHtcbiAgICB0aGlzLnVuZG9TdmdNZXRob2RDYWxsU291cmNlLm5leHQoKTtcbiAgfVxuICBwdWJsaWMgcmVkbygpOiB2b2lkIHtcbiAgICB0aGlzLnJlZG9TdmdNZXRob2RDYWxsU291cmNlLm5leHQoKTtcbiAgfVxuICBwdWJsaWMgYWRkSW1hZ2UoaW1hZ2U6IHN0cmluZyB8IEFycmF5QnVmZmVyKTogdm9pZCB7XG4gICAgdGhpcy5hZGRJbWFnZU1ldGhvZENhbGxTb3VyY2UubmV4dChpbWFnZSk7XG4gIH1cbn1cbiJdfQ==