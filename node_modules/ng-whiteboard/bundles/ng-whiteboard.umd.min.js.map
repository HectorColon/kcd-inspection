{"version":3,"sources":["../../../projects/ng-whiteboard/src/lib/ng-whiteboard.types.ts","../../../projects/ng-whiteboard/src/lib/ng-whiteboard.service.ts","../../../projects/ng-whiteboard/src/lib/ng-whiteboard.component.ts","../../../projects/ng-whiteboard/src/lib/ng-whiteboard.module.ts"],"names":["this","color","backgroundColor","size","linejoin","linecap","ActionType","Line","Image","FormatType","Png","Jpeg","Svg","Base64","NgWhiteboardService","eraseSvgMethodCallSource","Subject","saveSvgMethodCallSource","undoSvgMethodCallSource","redoSvgMethodCallSource","addImageMethodCallSource","eraseSvgMethodCalled$","asObservable","saveSvgMethodCalled$","undoSvgMethodCalled$","redoSvgMethodCalled$","addImageMethodCalled$","prototype","erase","next","save","format","name","undo","redo","addImage","image","Injectable","args","providedIn","NgWhiteboardComponent","whiteboardService","whiteboardOptions","WhiteboardOptions","init","EventEmitter","clear","imageAdded","selection","undefined","subscriptionList","undoStack","redoStack","ngAfterViewInit","_this","push","subscribe","eraseSvg","_a","saveSvg","undoDraw","redoDraw","initSvg","svgContainer","nativeElement","ngOnDestroy","forEach","subscription","_unsubscribe","selector","d3Line","line","curve","curveBasis","svg","select","call","drag","container","subject","p","event","x","y","on","d","active","append","datum","attr","mouse","length","type","node","emit","drawImage","selectAll","remove","svgString","saveAsSvg","clone","svgString2Image","Number","style","replace","img","imgSrc","btoa","unescape","encodeURIComponent","download","pop","action","drawLine","pathNode","appendChild","group","data","r","scale","tempImg","onload","aspectRatio","width","height","toString","cursor","cord","parentNode","src","unsubscribe","callback","svgData","canvas","document","createElement","context","getContext","clearRect","pngData","toDataURL","svgNode","setAttribute","XMLSerializer","serializeToString","url","link","href","body","click","Component","template","ViewChild","static","Input","Output","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["export class WhiteboardOptions {\n  color = '#000000';\n  backgroundColor = '#ffffff';\n  size = '5px';\n  linejoin: 'miter' | 'round' | 'bevel' | 'miter-clip' | 'arcs' = 'round';\n  linecap: 'butt' | 'square' | 'round' = 'round';\n}\n\nexport interface ActionStack {\n  type: ActionType;\n  line?: SVGPathElement;\n  image?: SVGGElement;\n}\n\nexport enum ActionType {\n  Line,\n  Image,\n}\n\nexport type formatTypes = 'png' | 'jpeg' | 'svg' | 'base64';\n\nexport enum FormatType {\n  Png = 'png',\n  Jpeg = 'jpeg',\n  Svg = 'svg',\n  Base64 = 'base64',\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { FormatType, formatTypes } from './ng-whiteboard.types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgWhiteboardService {\n  // Observable string sources\n  private eraseSvgMethodCallSource = new Subject<any>();\n  private saveSvgMethodCallSource = new Subject<{ name: string; format: formatTypes }>();\n  private undoSvgMethodCallSource = new Subject<any>();\n  private redoSvgMethodCallSource = new Subject<any>();\n  private addImageMethodCallSource = new Subject<string | ArrayBuffer>();\n\n  // Observable string streams\n  eraseSvgMethodCalled$ = this.eraseSvgMethodCallSource.asObservable();\n  saveSvgMethodCalled$ = this.saveSvgMethodCallSource.asObservable();\n  undoSvgMethodCalled$ = this.undoSvgMethodCallSource.asObservable();\n  redoSvgMethodCalled$ = this.redoSvgMethodCallSource.asObservable();\n  addImageMethodCalled$ = this.addImageMethodCallSource.asObservable();\n\n  // Service message commands\n  public erase(): void {\n    this.eraseSvgMethodCallSource.next();\n  }\n  public save(format: formatTypes = FormatType.Png, name: string = 'New image'): void {\n    this.saveSvgMethodCallSource.next({ name, format });\n  }\n  public undo(): void {\n    this.undoSvgMethodCallSource.next();\n  }\n  public redo(): void {\n    this.redoSvgMethodCallSource.next();\n  }\n  public addImage(image: string | ArrayBuffer): void {\n    this.addImageMethodCallSource.next(image);\n  }\n}\n","import { Component, AfterViewInit, ViewChild, Input, ElementRef, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { NgWhiteboardService } from './ng-whiteboard.service';\nimport { Subscription } from 'rxjs';\nimport { WhiteboardOptions, ActionStack, ActionType, FormatType, formatTypes } from './ng-whiteboard.types';\nimport { ContainerElement, curveBasis, select, drag, Selection, line, event, mouse } from 'd3';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'ng-whiteboard',\n  template: `\n    <svg #svgContainer [style.background-color]=\"this.backgroundColor || this.whiteboardOptions.backgroundColor\"></svg>\n  `,\n  styleUrls: ['ng-whiteboard.component.scss'],\n})\nexport class NgWhiteboardComponent implements AfterViewInit, OnDestroy {\n  @ViewChild('svgContainer', { static: false }) private svgContainer: ElementRef<ContainerElement>;\n  @Input() whiteboardOptions: WhiteboardOptions = new WhiteboardOptions();\n  @Input() color: string;\n  @Input() backgroundColor: string;\n  @Input() size: string;\n  @Input() linejoin: 'miter' | 'round' | 'bevel' | 'miter-clip' | 'arcs';\n  @Input() linecap: 'butt' | 'square' | 'round';\n\n  @Output() init = new EventEmitter();\n  @Output() clear = new EventEmitter();\n  @Output() undo = new EventEmitter();\n  @Output() redo = new EventEmitter();\n  @Output() save = new EventEmitter<string | Blob>();\n  @Output() imageAdded = new EventEmitter();\n\n  private selection: Selection<any, unknown, null, undefined> = undefined;\n\n  private subscriptionList: Subscription[] = [];\n\n  private undoStack: ActionStack[] = [];\n  private redoStack: ActionStack[] = [];\n\n  constructor(private whiteboardService: NgWhiteboardService) {}\n\n  ngAfterViewInit() {\n    this.subscriptionList.push(\n      this.whiteboardService.eraseSvgMethodCalled$.subscribe(() => this.eraseSvg(this.selection))\n    );\n\n    this.subscriptionList.push(\n      this.whiteboardService.saveSvgMethodCalled$.subscribe(({ name, format }) => this.saveSvg(name, format))\n    );\n    this.subscriptionList.push(this.whiteboardService.undoSvgMethodCalled$.subscribe(() => this.undoDraw()));\n    this.subscriptionList.push(this.whiteboardService.redoSvgMethodCalled$.subscribe(() => this.redoDraw()));\n    this.subscriptionList.push(this.whiteboardService.addImageMethodCalled$.subscribe((image) => this.addImage(image)));\n\n    this.selection = this.initSvg(this.svgContainer.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptionList.forEach((subscription) => this._unsubscribe(subscription));\n  }\n\n  private initSvg(selector: ContainerElement) {\n    const d3Line = line().curve(curveBasis);\n    const svg = select(selector).call(\n      drag()\n        .container(selector)\n        .subject(() => {\n          const p = [event.x, event.y];\n          return [p, p];\n        })\n        .on('start', () => {\n          const d = event.subject;\n          const active = svg\n            .append('path')\n            .datum(d)\n            .attr('class', 'line')\n            .attr(\n              'style',\n              `\n           fill: none;\n           stroke: ${this.color || this.whiteboardOptions.color};\n           stroke-width: ${this.size || this.whiteboardOptions.size};\n           stroke-linejoin: ${this.linejoin || this.whiteboardOptions.linejoin};\n           stroke-linecap: ${this.linecap || this.whiteboardOptions.linecap};\n           `\n            );\n          active.attr('d', d3Line);\n          event.on('drag', function () {\n            active.datum().push(mouse(this));\n            active.attr('d', d3Line);\n          });\n          event.on('end', () => {\n            active.attr('d', d3Line);\n            if (this.undoStack.length < 1) {\n              this.redoStack = [];\n            }\n            this.undoStack.push({ type: ActionType.Line, line: active.node() });\n          });\n        })\n    );\n    this.init.emit();\n    return svg;\n  }\n\n  private addImage(image: string | ArrayBuffer) {\n    this.drawImage(image);\n  }\n\n  private eraseSvg(svg: Selection<any, unknown, null, undefined>) {\n    svg.selectAll('*').remove();\n    this.undoStack = [];\n    this.redoStack = [];\n    this.clear.emit();\n  }\n\n  private saveSvg(name, format: formatTypes) {\n    const svgString = this.saveAsSvg(this.selection.clone(true).node());\n    switch (format) {\n      case FormatType.Base64:\n        this.svgString2Image(\n          svgString,\n          Number(this.selection.style('width').replace('px', '')),\n          Number(this.selection.style('height').replace('px', '')),\n          format,\n          (img) => {\n            this.save.emit(img);\n          }\n        );\n        break;\n      case FormatType.Svg:\n        const imgSrc = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));\n        this.download(imgSrc, name);\n        this.save.emit(imgSrc);\n        break;\n      default:\n        this.svgString2Image(\n          svgString,\n          Number(this.selection.style('width').replace('px', '')),\n          Number(this.selection.style('height').replace('px', '')),\n          format,\n          (img) => {\n            this.download(img, name);\n            this.save.emit(img);\n          }\n        );\n        break;\n    }\n  }\n\n  private undoDraw() {\n    if (!this.undoStack.length) {\n      return;\n    }\n    this.redoStack.push(this.undoStack.pop());\n    this.selection.selectAll('.line').remove();\n    this.undoStack.forEach((action) => {\n      if (action.type === ActionType.Line) {\n        this.drawLine(action.line);\n      } else if (action.type === ActionType.Image) {\n        this.drawLine(action.image);\n      }\n    });\n    this.undo.emit();\n  }\n\n  private redoDraw() {\n    if (!this.redoStack.length) {\n      return;\n    }\n    this.undoStack.push(this.redoStack.pop());\n    this.selection.selectAll('.line').remove();\n    this.undoStack.forEach((action) => {\n      if (action.type === ActionType.Line) {\n        this.drawLine(action.line);\n      } else if (action.type === ActionType.Image) {\n        this.drawLine(action.image);\n      }\n    });\n    this.redo.emit();\n  }\n\n  private drawLine(pathNode: SVGPathElement | SVGGElement) {\n    this.selection.node().appendChild(pathNode);\n  }\n\n  private drawImage(image: string | ArrayBuffer) {\n    const group = this.selection\n      .append('g')\n      .data([{ x: 20, y: 20, r: 1, scale: 1 }])\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('transform', 'translate(0,0)');\n\n    const tempImg = new Image();\n    tempImg.onload = () => {\n      const aspectRatio = tempImg.width / tempImg.height;\n      const height =\n        tempImg.height > Number(this.selection.style('height').replace('px', ''))\n          ? Number(this.selection.style('height').replace('px', '')) - 40\n          : tempImg.height;\n      const width =\n        height === Number(this.selection.style('height').replace('px', '')) - 40\n          ? (Number(this.selection.style('height').replace('px', '')) - 40) * aspectRatio\n          : tempImg.width;\n      group\n        .append('image')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('height', height)\n        .attr('width', width)\n        .attr('preserveAspectRatio', 'none')\n        .attr('xlink:href', image.toString());\n\n      group\n        .append('rect')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 20)\n        .attr('height', 20)\n        .style('opacity', 0)\n        .attr('fill', (d) => {\n          return '#cccccc';\n        })\n        .call(\n          drag()\n            .subject(() => {\n              const p = [event.x, event.y];\n              return [p, p];\n            })\n            .on('start', () => {\n              event.on('drag', function (d) {\n                const cursor = select(this);\n                const cord = mouse(this);\n\n                d.x += cord[0] - Number(cursor.attr('width')) / 2;\n                d.y += cord[1] - Number(cursor.attr('height')) / 2;\n                select(this.parentNode).attr('transform', () => {\n                  return (\n                    'translate(' + [d.x, d.y] + '),rotate(' + 0 + ',160, 160),scale(' + d.scale + ',' + d.scale + ')'\n                  );\n                });\n              });\n            })\n        );\n      group\n        .on('mouseover', function () {\n          select(this).select('rect').style('opacity', 1.0);\n        })\n        .on('mouseout', function () {\n          select(this).select('rect').style('opacity', 0);\n        });\n      // this.undoStack.push({ type: ActionType.Image, image: group.node() });\n    };\n    tempImg.src = image.toString();\n  }\n\n  private _unsubscribe(subscription: Subscription): void {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n  }\n\n  private svgString2Image(\n    svgString: string,\n    width: number,\n    height: number,\n    format: string,\n    callback: (img: string) => void\n  ) {\n    // set default for format parameter\n    format = format || 'png';\n    // SVG data URL from SVG string\n    const svgData = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));\n    // create canvas in memory(not in DOM)\n    const canvas = document.createElement('canvas');\n    // get canvas context for drawing on canvas\n    const context = canvas.getContext('2d');\n    // set canvas size\n    canvas.width = width;\n    canvas.height = height;\n    // create image in memory(not in DOM)\n    const image = new Image();\n    // later when image loads run this\n    image.onload = () => {\n      // async (happens later)\n      // clear canvas\n      context.clearRect(0, 0, width, height);\n      // draw image with SVG data to canvas\n      context.drawImage(image, 0, 0, width, height);\n      // snapshot canvas as png\n      const pngData = canvas.toDataURL('image/' + format);\n      // pass png data URL to callback\n      callback(pngData);\n    }; // end async\n    // start loading SVG data into in memory image\n    image.src = svgData;\n  }\n\n  private saveAsSvg(svgNode): string {\n    svgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n\n    // Set width and height for svg element\n    svgNode.setAttribute('width', Number(this.selection.style('width').replace('px', '')));\n    svgNode.setAttribute('height', Number(this.selection.style('height').replace('px', '')));\n\n    const serializer = new XMLSerializer();\n    let svgString = serializer.serializeToString(svgNode);\n    svgString = svgString.replace(/(\\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace\n    svgString = svgString.replace(/NS\\d+:href/g, 'xlink:href');\n    return svgString;\n  }\n\n  private download(url: string, name: string): void {\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('visibility', 'hidden');\n    link.download = name || 'new white-board';\n    document.body.appendChild(link);\n    link.click();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgWhiteboardComponent } from './ng-whiteboard.component';\n\n@NgModule({\n  declarations: [NgWhiteboardComponent],\n  imports: [],\n  exports: [NgWhiteboardComponent]\n})\nexport class NgWhiteboardModule {}\n"]}